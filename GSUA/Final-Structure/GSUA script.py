"""

This is the main GSUA script. It contains calls the master definition list of the inputs/outputs. and the problem. Runs the sampler,
runs each of the models, stores the outputs, analyzes the outputs, and charts them throught the use of functions.

"""


from SALib.sample import saltelli
from SALib.analyze import sobol
from SALib import ProblemSpec
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import winsound
from datetime import datetime

import MEC_AMI_GSUA
import MEC_BOS_GSUA
import MEC_CAV_GSUA
import EE
import SOBOL_ANALYSIS
import GSUA_visulization
import naming_function
import clear_contents

clear_contents.empty__output_dirs()

########################################################
############ Defining the Model Inputs #################
########################################################

inputs = naming_function.mec_input_names()
outputs = naming_function.mec_output_names()
models = naming_function.model_names()
sp = naming_function.prob_spec()


# ########################################################
# ############ Generate the Samples ######################
# ########################################################
# """
#     If needed this step of generating parameters may be skipped
#     once generated and the simulations performed. The output
#     files will be able to be used for the analysis and charting
# """
if __name__ == '__main__':

    sim_start=datetime.now()
    print("Generating the samples")

    SOBOL_ANALYSIS.SAMPLE()

    print('sobol sampling completed, proceeding to the simulations')



##########################################################
######################### Run Models #####################
##########################################################

    param_values = np.loadtxt('C:/Users/donal/Documents/GitHub/Modified-Energy-Cascade/GSUA/Final-Structure/SOBOL_parameters.txt') # loads the parameters generated by the main GSUA program

    ami_count = 0
    bos_count = 0
    cav_count = 0
    for i, X in enumerate(param_values):
        """ the structure of this for loop sets the model inputs equal to a
            row from the sampled parameters for each simulation iteration.
        """

        # Columns are Temp, Humidity, CO2, PPFD, H, Model Structure
        SIM_TEMP = X[0]
        SIM_RH   = X[1]
        SIM_CO2  = X[2]
        SIM_PPFD = X[3]
        SIM_H    = X[4]
        SIM_STRU = X[5]
        SIM_NUM = i
        # print(SIM_NUM,SIM_TEMP,SIM_RH,SIM_CO2,SIM_PPFD,SIM_H, SIM_STRU)
        SIM_LENGTH = 30

        if SIM_NUM % 100 == 0:
            print(f"{SIM_NUM}")
        if SIM_STRU == 1:
            ami_count += 1
            MEC_AMI_GSUA.RUN_SIM(SIM_TEMP, SIM_RH, SIM_CO2, SIM_PPFD, SIM_H, SIM_NUM, SIM_LENGTH, SIM_STRU)      # Runs just the simulations for the Amitrano Model
        elif SIM_STRU == 2:
            bos_count += 1
            MEC_BOS_GSUA.RUN_SIM(SIM_TEMP, SIM_RH, SIM_CO2, SIM_PPFD, SIM_H, SIM_NUM, SIM_LENGTH, SIM_STRU)      # Runs just the simulations for the Boscheri Model
        else:
            cav_count += 1
            MEC_CAV_GSUA.RUN_SIM(SIM_TEMP, SIM_RH, SIM_CO2, SIM_PPFD, SIM_H, SIM_NUM, SIM_LENGTH, SIM_STRU)      # Runs just the simulations for the Cavazzoni Model
    print(f'AMI={ami_count} BOS={bos_count} CAV={cav_count}')

    # Combining all the seperate datafiles into one for the anaylsis portion
    AMI_df = pd.read_csv("C:/Users/donal/Documents/GitHub/Modified-Energy-Cascade/GSUA/Final-Structure/GSUA_AMI_out/data/GSUA_AMI_Simulations.csv", header=None)
    AMI_df_label = ['Timestep','skip?','SIM_NUM', 'H','A','ALPHA','BETA','CQY','CUE_24',
                     'DCG','CGR','TCB','TEB','DOP','VP_SAT','VP_AIR','VPD','P_GROSS',
                     'P_NET','g_S','g_A','g_C','DTR','T_LIGHT','T_DARK','RH','CO2','PPFD', 'SIM_STRU']
    AMI_df.columns = AMI_df_label
    BOS_df = pd.read_csv("C:/Users/donal/Documents/GitHub/Modified-Energy-Cascade/GSUA/Final-Structure/GSUA_BOS_out/data/GSUA_BOS_Simulations.csv", header=None)
    BOS_df_label = ['SIM_NUM','Timestep','H','Diurnal', 'A','ALPHA','BETA','CQY',
                     'CUE_24','DCG','CGR','DWCGR','TCB','TEB',
                     'VP_SAT','VP_AIR','VPD','P_NET','P_GROSS',
                     'DOP','DOC','g_S','g_A','g_C','DTR',
                     'DCO2C','DCO2P','DNC', 'DWC','T_LIGHT',
                     'T_DARK','RH','CO2','PPFD', 'SIM_STRU']
    BOS_df.columns = BOS_df_label
    CAV_df = pd.read_csv("C:/Users/donal/Documents/GitHub/Modified-Energy-Cascade/GSUA/Final-Structure/GSUA_CAV_out/data/GSUA_CAV_Simulations.csv", header=None)
    CAV_df_label = ['SIM_NUM','Timestep','H','A','ALPHA','BETA','CQY','CUE_24','DCG',
                     'CGR','TCB','TEB','DOP','VP_SAT','VP_AIR','VPD','P_GROSS',
                     'P_NET','g_S','g_A','g_C','DTR','T_LIGHT','T_DARK','RH','CO2','PPFD', 'SIM_STRU']
    CAV_df.columns = CAV_df_label

    GSUA_df = pd.concat([AMI_df, BOS_df, CAV_df])
    GSUA_df = GSUA_df.sort_values(by='SIM_NUM')
    clear_contents.clear_GSUA_sim_csv()
    GSUA_df.to_csv('C:/Users/donal/Documents/GitHub/Modified-Energy-Cascade/GSUA/Final-Structure/GSUA_simulations.csv', mode='a', index=False, header=True)
    # print(GSUA_df)

    MEC_AMI_GSUA.RUN_CHART(models, inputs, outputs)    # Runs just the charting for the Amitrano Model
    MEC_BOS_GSUA.RUN_CHART(models, inputs, outputs)    # Runs just the charting for the Boscheri Model
    MEC_CAV_GSUA.RUN_CHART(models, inputs, outputs)    # Runs just the charting for the Cavazzoni Model


    sim_time = datetime.now()-sim_start
    print(f"All three models have run. It took {sim_time}")

##########################################################
################### Analysis #############################
##########################################################
    print("Beginning Analysis of simulations")
    analysis_start=datetime.now()

    SOBOL_ANALYSIS.ANALYZE()
    EE.ANALYZE()

    duration = 1000  # milliseconds
    freq = 440  # Hz
    winsound.Beep(freq, duration)


    analysis_time = datetime.now()-analysis_start



    print(f"All three models analyzed. It took {analysis_time}")


##########################################################
################### VISUALIZATIONS #######################
##########################################################

GSUA_visulization.GSUA_CHARTS()
EE.CHART()

###########################################
############ To Do ########################
###########################################
